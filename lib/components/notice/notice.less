/**
 * Generate color variables with a given color name
 *
 * Usage example:
 * .generate-variant-variables(purple, important);
 *
 * @colorName - The name of the color to use to construct variables values
 * @modifier - Modifier name to determine variable values for that modifier
 */
.generate-variant-variables(@colorName: "", @modifier: "") {
    & when (@modifier = "") {
        --_no-bc: ~"var(--@{colorName}-300)";
        --_no-bg: ~"var(--@{colorName}-100)";
        --_no-btn-bg-active: ~"var(--@{colorName}-200)";
        --_no-btn-bg-focus: ~"var(--@{colorName}-200)";
        --_no-btn-fc: ~"var(--@{colorName}-500)";
        --_no-code-bc: ~"var(--@{colorName}-300)";
        --_no-code-bg: ~"var(--@{colorName}-200)";
    }

    & when (@modifier = important) {
        --_no-bc: var(--_no-bg);
        --_no-bg: ~"var(--@{colorName}-400)";
        --_no-fc: var(--white);
        --_no-btn-bg-active: ~"var(--@{colorName}-500)";
        --_no-btn-bg-focus: ~"var(--@{colorName}-500)";
        --_no-btn-fc: ~"var(--@{colorName}-100)";
        --_no-code-bc: ~"var(--@{colorName}-300)";
        --_no-code-bg: ~"var(--@{colorName}-500)";

        .highcontrast-mode({
            --_no-bg: ~"var(--@{colorName}-500)";
        });
    }
}

/**
 * Generate styles for a notice-based component
 *
 * Usage example:
 * .construct-notice-component(s-banner);
 *
 * @baseClass - The base class name for the notice component
 */
.construct-notice-component(@baseClass) {
    --_no-bc: var(--black-225);
    --_no-bg: var(--black-100);
    --_no-fc: var(--black-500);
    --_no-btn-bg-active: var(--black-250);
    --_no-btn-bg-focus: var(--black-225);
    --_no-btn-fc: var(--_no-fc);
    --_no-code-bc: var(--black-300);
    --_no-code-bg: var(--black-200);
    --_no-code-fc: var(--_no-fc);

    // CONTEXTUAL STYLES
    .dark-mode({
        --_no-bc: var(--_no-bg);
    });

    .highcontrast-mode({
        &,
        &.@{baseClass}__danger,
        &.@{baseClass}__info,
        &.@{baseClass}__success,
        &.@{baseClass}__warning {
            --_no-code-bc: var(--black-400);
            --_no-code-bg: var(--white);
            --_no-code-fc: var(--black);

            &.@{baseClass}__important {
                --_no-code-bc: var(--black-200);
                --_no-code-bg: var(--black);
                --_no-code-fc: var(--white);
            }
        }
    });

    // MODIFIERS
    &__important:not(.@{baseClass}__danger):not(.@{baseClass}__info):not(.@{baseClass}__success):not(.@{baseClass}__warning) {
        --_no-bc: var(--_no-bg);
        --_no-bg: var(--black-500);
        --_no-fc: var(--white);
        --_no-btn-bg-focus: var(--black-600);
        --_no-btn-bg-active: var(--black-600);
        --_no-btn-fc: var(--_no-fc);
        --_no-code-bc: var(--black-300);
        --_no-code-bg: var(--black-600);
    }

    // VARIANTS
    &__danger {
        &:not(.@{baseClass}__important) {
            .generate-variant-variables(red);
        }

        &.@{baseClass}__important {
            .generate-variant-variables(red, important);
        }
    }

    &__info {
        &:not(.@{baseClass}__important) {
            .generate-variant-variables(theme-secondary);
        }

        &.@{baseClass}__important {
            .generate-variant-variables(theme-secondary, important);
        }
    }

    &__success {
        &:not(.@{baseClass}__important) {
            .generate-variant-variables(green);
        }

        &.@{baseClass}__important {
            .generate-variant-variables(green, important);
        }
    }

    &__warning {
        &:not(.@{baseClass}__important) {
            .generate-variant-variables(yellow);
            --_no-btn-fc: var(--yellow-600);
        }

        &.@{baseClass}__important {
            --_no-bc: var(--_no-bg);
            --_no-bg: var(--yellow-400);
            --_no-fc: var(--black);
            --_no-btn-fc: var(--_no-fc);
            --_no-btn-bg-active: var(--yellow-300);
            --_no-btn-bg-focus: var(--yellow-300);
            --_no-code-bc: var(--yellow-500);
            --_no-code-bg: var(--yellow-300);

            .dark-mode({
                --_no-fc: var(--white);
                --_no-code-bc: var(--yellow-300);
                --_no-code-bg: var(--yellow-500);
            });

            .highcontrast-mode({
                --_no-bg: var(--yellow-500);
                --_no-fc: var(--white);
                --_no-btn-bg-active: transparent;
                --_no-btn-bg-focus: transparent;
            });
        }
    }

    // CHILD ELEMENTS
    code {
        background-color: var(--_no-code-bg);
        color: var(--_no-code-fc);
        outline: var(--su-static1) solid var(--_no-code-bc);

        border-radius: var(--br-sm);
        padding-left: var(--su2);
        padding-right: var(--su2);
    }

    & &--btn {
        // TODO: decouple .s-notice--btn from .s-btn
        &:active {
            background-color: var(--_no-btn-bg-active, inherit) !important;
        }

        &:focus-visible,
        &:hover,
        &.focus-inset-bordered {
            background-color: var(--_no-btn-bg-focus, inherit) !important;
        }

        color: var(--_no-btn-fc, inherit) !important;
        padding: var(--su8);
    }

    // STYLES MODIFIED BY COMPONENT-SPECIFIC CUSTOM PROPERTIES
    background: var(--_no-bg);
    border-color: var(--_no-bc);
    color: var(--_no-fc);

    border-style: solid;
    font-size: var(--fs-body1);
}

.s-notice {
    .construct-notice-component(s-notice);

    border-radius: var(--br-md);
    border-width: var(--su-static1);
    padding: var(--su16);
}
