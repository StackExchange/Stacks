//
//  STACK OVERFLOW
//  GRID
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. For documentation of all these classes and how to contribute,
//  visit https://stackoverflow.design/
//
//  TABLE OF CONTENTS
//  • VARIABLES
//  • MIXINS
//  • GRID ELEMENTS
//  • GRID SPACING
//  • MODIFICATIONS
//

//  ============================================================================
//  --  STACKS GRID MIXINS
//  ============================================================================
//  --  FIXED COLUMN WIDTHS
//  ----------------------------------------------------------------------------

#stacks-internals() {
    #grid-builder-settings() {
        @grid-cols: 12;    //  Desired grid columns
    }
    #grid-builder-helpers() {
        #stacks-internals #grid-builder-settings();

        .create-fixed-cells(@num, @count: 1) when (@count =< @num) {
            .grid--cell@{count} {
                flex-basis: (@count * 100%) / @num;

                //  --  IE11/10 Flex-basis bug
                //      Known issue where if a flex item has a box-sizing border-box
                //      value, the flex-basis value is incorrect. The workaround is
                //      to apply a width or height. Since flex-basis applies in the
                //      flow direction, we have to conditionally set the width (default)
                //      or height (if a column).
                //  --------------------------------------------------------------------
                @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                    flex-basis: auto;
                    width: (@count * 100%) / @num;
                }
            }

            #stacks-internals #grid-builder-helpers .create-fixed-cells(@num, (@count + 1));
        }

        //  --  AUTO FIXED WIDTH CELLS
        //      Automatic adjusting width cells are great. And being able to specify a
        //      cell's width is equally amazing. But sometimes you want to be able to
        //      have all cell's within a box container to be the same width. Instead
        //      stating a fixed cell width, apply a modifying to the box container and
        //      all child elements will automatically be sized.
        //  ----------------------------------------------------------------------------
        .create-grid-count-cols(@num, @count: 1) when (@count =< @num) {
            .grid__allcells@{count} {
                > .grid,
                > .grid--cell {
                    flex-basis: (@count * 100%) / @num;

                    //  --  IE11/10 Flex-basis bug
                    //      Known issue where if a flex item has a box-sizing border-box
                    //      value, the flex-basis value is incorrect. The workaround is
                    //      to apply a width or height. Since flex-basis applies in the
                    //      flow direction, we have to conditionally set the width (default)
                    //      or height (if a column).
                    //  --------------------------------------------------------------------
                    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                        flex-basis: auto;
                        width: (@count * 100%) / @num;
                    }
                }
            }

            #stacks-internals #grid-builder-helpers .create-grid-count-cols(@num, (@count + 1));
        }

        //  --  GRID GUTTERS
        //  ============================================================================
        //      We need two mixins to properly generate grid gutters:
        //
        //      [1]  Adjusts the fixed column max-width / flex-basis if gutters are present.
        //      [2]  Generate the desired gutters.
        //
        //  ----------------------------------------------------------------------------
        //      [1] Adjust width / flex-basis numbers
        //
        //      HOW IT WORKS:
        //      A quick primer on how this mixin works. The TL;DR is we're using a mixin
        //      guard to start a loop that'll create all the desired `> .grid--cell@{count}`
        //      classes.
        //
        //      The three mixin parameters are:
        //        - @spacing: the desired distance our gutters should be
        //        - @num: the number at which we should stop our loop
        //        - @count: the current column number
        //
        //      The other bit is the mixin guard portion:
        //
        //          when (@count =< @num)
        //
        //      This checks if we should run the mixin. Using a comparison operator,
        //      it's checking to see if the current @count is equal to (=) or less
        //      than (<) the desired @num total. If it is, run the mixin.
        //
        //      Next the mixin runs as normal. Using the @cell-width variable, we
        //      calculate the cell's width. We do this here because we need to use the
        //      CSS calc function and this makes the code a little prettier. Using the
        //      variable, we then update the fixed cell's flex-basis and width.
        //
        //      Finally we call for the mixin again within itself, assigning a new
        //      @count value: the current value + 1. This then fires off the mixin
        //      again, creating a loop until we've generated updated widths for all
        //      of our desired @num.
        //
        //      There are two mixins here:
        //          • "grid-fixed-cell-row" -- This is the baseline mixin.
        //          • "grid-fixed-cell-column" -- When the ".grid" is a column, change
        //             the margins, setting a top and bottom margin instead of left
        //             and right.
        //
        //  ----------------------------------------------------------------------------
        .grid-fixed-cell-spacing(@spacing, @num, @count: 1) when (@count =< @num) {
            @cell-width: @count * 100% / @num;

            > .grid--cell@{count} {
                margin: @spacing / 2;
            }

            //  ------------------------------------------------------------------------
            //  [1] FIXED WIDTH CELLS
            //      This makes the fixed width cells to account for gutters.
            //
            //  [2] UNIFORM CHILD GRID CELLS
            //      This class allows you to uniformly state the width of `.grid--cell`
            //      divs within a `.grid` element. In particular we adjust the flex-basis
            //      and max-width here to account for gutters.
            //  ------------------------------------------------------------------------
            > .grid--cell@{count},                                  // [1]
            &.grid__allcells@{count} > .grid,                       // [2]
            &.grid__allcells@{count} > .grid--cell {                // [2]
                flex-basis: calc(~"@{cell-width} - @{spacing}");

                //  --  IE11/10 Flex-basis bug
                //      Known issue where if a flex item has a box-sizing border-box
                //      value, the flex-basis value is incorrect. The workaround is
                //      to apply a width or height. Since flex-basis applies in the
                //      flow direction, we have to conditionally set the width (default)
                //      or height (if a column).
                //  --------------------------------------------------------------------
                @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                    flex-basis: auto;
                    width: calc(~"@{cell-width} - @{spacing}");
                }
            }

            #stacks-internals #grid-builder-helpers .grid-fixed-cell-spacing(@spacing, @num, (@count + 1));
        }


        //  ----------------------------------------------------------------------------
        //      2.  Generate the desired gutters
        //          We halve the spacing value because the spacing value should be the
        //          total space between cells--not the total applied to each cell,
        //          which would effectively double the desired total.
        //
        //          The "when" statements here refer to when we declare it's for a
        //          row (default) or a column. When a column we need to reset the
        //          left and right margins and add in top and bottom margins.
        //  ----------------------------------------------------------------------------
        .gutter-spacing(@spacing) {
            #stacks-internals #grid-builder-settings();

            margin: -(@spacing / 2);

            //  --  FLUID CELLS
            > .grid,
            > .grid--cell {
                margin: @spacing / 2;
            }

            //  --  FIXED WIDTH CELLS
            //      Now we call for the above mixin [1] to make sure we adjust the default
            //      widths for the new gutters.
            #stacks-internals #grid-builder-helpers .grid-fixed-cell-spacing(@spacing, @grid-cols);
        }
    }
}


//  ============================================================================
//  $   GRID ELEMENTS
//  ============================================================================
//      To help simplify our CSS, we create a generic box container. By default
//      this is a row container, but we can modify the box to become a column.
//  ----------------------------------------------------------------------------
.grid {
    display: flex;
}

//  --  UNIVERSAL FLEX WIDTHS
//      This applies a flex value it to all of a grid's direct children.
//  --------------------------------------------------------------------------
.grid__fl0 {
    &,
    > .grid,
    > .grid--cell {
        flex: 0 auto;
    }
}
.grid__fl1 {
    &,
    > .grid,
    > .grid--cell {
        flex: 1 auto;
    }
}


& {
    #stacks-internals #grid-builder-settings(); // load @grid-cols

    //  $$  FIXED WIDTH CELLS
    //  ----------------------------------------------------------------------------
    #stacks-internals #grid-builder-helpers .create-fixed-cells(@grid-cols);

    //  $$  AUTO FIXED WIDTH CELLS
    //  ----------------------------------------------------------------------------
    #stacks-internals #grid-builder-helpers .create-grid-count-cols(@grid-cols);

    //  --  IE11/10 Flex-basis bug
    //      Known issue where if a flex item has a box-sizing border-box
    //      value, the flex-basis value is incorrect. The workaround is
    //      to apply a width or height. Since flex-basis applies in the
    //      flow direction, we have to conditionally set the width (default)
    //      or height (if a column).
    //  --------------------------------------------------------------------
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        .fd-column,
        .fd-column-reverse {
            > .grid,
            > [class*="grid--cell"],
            &[class*="grid__allcells"] > .grid,
            &[class*="grid__allcells"] > [class*="grid--cell"] {
                width: auto;
            }
        }
        .lg\:fd-column,
        .lg\:fd-column-reverse {
            > .grid,
            > [class*="grid--cell"],
            &[class*="grid__allcells"] > .grid,
            &[class*="grid__allcells"] > [class*="grid--cell"] {
                #stacks-internals #screen-lg({ width: auto; })
            }
        }
        .md\:fd-column,
        .md\:fd-column-reverse {
            > .grid,
            > [class*="grid--cell"],
            &[class*="grid__allcells"] > .grid,
            &[class*="grid__allcells"] > [class*="grid--cell"] {
                #stacks-internals #screen-md({ width: auto; })
            }
        }
        .sm\:fd-column,
        .sm\:fd-column-reverse {
            > .grid,
            > [class*="grid--cell"],
            &[class*="grid__allcells"] > .grid,
            &[class*="grid__allcells"] > [class*="grid--cell"] {
                #stacks-internals #screen-sm({ width: auto; })
            }
        }
    }

}
//  ============================================================================
//  $   GRID SPACING
//      Insert spaces or gutters in between grid cells
//  ----------------------------------------------------------------------------
.gs2    { #stacks-internals #grid-builder-helpers .gutter-spacing(@su2); }        //  2px
.gs4    { #stacks-internals #grid-builder-helpers .gutter-spacing(@su4); }        //  4px
.gs8    { #stacks-internals #grid-builder-helpers .gutter-spacing(@su8); }        //  8px
.gs12   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su12); }       //  12px
.gs16   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su16); }       //  16px
.gs24   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su24); }       //  24px
.gs32   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su32); }       //  32px
.gs48   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su48); }       //  48px
.gs64   { #stacks-internals #grid-builder-helpers .gutter-spacing(@su64); }       //  64px

//  On rows, remove top and bottom margins
.gsx {
    &,
    > .grid,
    > [class*="grid--cell"] {
        margin-top: 0;
        margin-bottom: 0;
    }
}

//  On columns, remove left and right margins
.gsy {
    &,
    > .grid,
    > [class*="grid--cell"] {
        margin-right: 0;
        margin-left: 0;
    }
}
