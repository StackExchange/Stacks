//
//  STACK OVERFLOW
//  FLEX
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. For documentation of all these classes and how to contribute,
//  visit https://stackoverflow.design/
//
//  TABLE OF CONTENTS
//  • VARIABLES
//  • MIXINS
//  • FLEX LAYOUT ELEMENTS
//  • FLEX LAYOUT SPACING
//  • MODIFICATIONS
//

//  ============================================================================
//  --  STACKS FLEX MIXINS
//  ============================================================================
//  --  FIXED COLUMN WIDTHS
//  ----------------------------------------------------------------------------

#stacks-internals() {
    #flex-builder-settings() {
        @flex-cols: 12;    //  Desired flex columns
    }
    #flex-builder-helpers() {
        #stacks-internals #flex-builder-settings();

        .create-fixed-cells(@num, @count: 1) when (@count =< @num) {
            .flex--cell@{count} {
                flex-basis: (@count * 100%) / @num;
            }

            #stacks-internals #flex-builder-helpers .create-fixed-cells(@num, (@count + 1));
        }

        //  --  AUTO FIXED WIDTH CELLS
        //      Automatic adjusting width cells are great. And being able to specify a
        //      cell's width is equally amazing. But sometimes you want to be able to
        //      have all cell's within a box container to be the same width. Instead
        //      stating a fixed cell width, apply a modifying to the box container and
        //      all child elements will automatically be sized.
        //  ----------------------------------------------------------------------------
        .create-flex-count-cols(@num, @count: 1) when (@count =< @num) {
            .flex__allcells@{count} {
                > .d-flex,
                > .flex--cell {
                    flex-basis: (@count * 100%) / @num;
                }
            }

            #stacks-internals #flex-builder-helpers .create-flex-count-cols(@num, (@count + 1));
        }

        //  --  FLEX LAYOUT GUTTERS
        //  ============================================================================
        //      We need two mixins to properly generate flex layout gutters:
        //
        //      [1]  Adjusts the fixed column max-width / flex-basis if gutters are present.
        //      [2]  Generate the desired gutters.
        //
        //  ----------------------------------------------------------------------------
        //      [1] Adjust width / flex-basis numbers
        //
        //      HOW IT WORKS:
        //      A quick primer on how this mixin works. The TL;DR is we're using a mixin
        //      guard to start a loop that'll create all the desired `> .flex--cell@{count}`
        //      classes.
        //
        //      The three mixin parameters are:
        //        - @spacing: the desired distance our gutters should be
        //        - @num: the number at which we should stop our loop
        //        - @count: the current column number
        //
        //      The other bit is the mixin guard portion:
        //
        //          when (@count =< @num)
        //
        //      This checks if we should run the mixin. Using a comparison operator,
        //      it's checking to see if the current @count is equal to (=) or less
        //      than (<) the desired @num total. If it is, run the mixin.
        //
        //      Next the mixin runs as normal. Using the @cell-width variable, we
        //      calculate the cell's width. We do this here because we need to use the
        //      CSS calc function and this makes the code a little prettier. Using the
        //      variable, we then update the fixed cell's flex-basis and width.
        //
        //      Finally we call for the mixin again within itself, assigning a new
        //      @count value: the current value + 1. This then fires off the mixin
        //      again, creating a loop until we've generated updated widths for all
        //      of our desired @num.
        //
        //      There are two mixins here:
        //          • "flex-fixed-cell-row" -- This is the baseline mixin.
        //          • "flex-fixed-cell-column" -- When the ".flex" is a column, change
        //             the margins, setting a top and bottom margin instead of left
        //             and right.
        //
        //  ----------------------------------------------------------------------------
        .flex-fixed-cell-spacing(@spacing, @num, @count: 1) when (@count =< @num) {
            @cell-width: @count * 100% / @num;

            > .flex--cell@{count} {
                margin: @spacing / 2;
            }

            //  ------------------------------------------------------------------------
            //  [1] FIXED WIDTH CELLS
            //      This makes the fixed width cells to account for gutters.
            //
            //  [2] UNIFORM CHILD FLEX LAYOUT CELLS
            //      This class allows you to uniformly state the width of `.flex--cell`
            //      divs within a `d-flex` element. In particular we adjust the flex-basis
            //      and max-width here to account for gutters.
            //  ------------------------------------------------------------------------
            > .flex--cell@{count},                                  // [1]
            &.flex__allcells@{count} > .flex,                       // [2]
            &.flex__allcells@{count} > .flex--cell {                // [2]
                flex-basis: calc(~"@{cell-width} - @{spacing}");
            }

            #stacks-internals #flex-builder-helpers .flex-fixed-cell-spacing(@spacing, @num, (@count + 1));
        }


        //  ----------------------------------------------------------------------------
        //      2.  Generate the desired gutters
        //          We halve the spacing value because the spacing value should be the
        //          total space between cells--not the total applied to each cell,
        //          which would effectively double the desired total.
        //
        //          The "when" statements here refer to when we declare it's for a
        //          row (default) or a column. When a column we need to reset the
        //          left and right margins and add in top and bottom margins.
        //  ----------------------------------------------------------------------------
        .gutter-spacing(@spacing) {
            #stacks-internals #flex-builder-settings();

            margin: -(@spacing / 2);

            //  --  FLUID CELLS
            > .d-flex,
            > .flex--cell {
                margin: @spacing / 2;
            }

            //  --  FIXED WIDTH CELLS
            //      Now we call for the above mixin [1] to make sure we adjust the default
            //      widths for the new gutters.
            #stacks-internals #flex-builder-helpers .flex-fixed-cell-spacing(@spacing, @flex-cols);
        }
    }
}

//  --  UNIVERSAL FLEX WIDTHS
//      This applies a flex value it to all of a flex layout's direct children.
//  --------------------------------------------------------------------------
.flex__fl0 {
    &,
    > .d-flex,
    > .flex--cell {
        flex: 0 auto;
    }
}
.flex__fl1 {
    &,
    > .d-flex,
    > .flex--cell {
        flex: 1 auto;
    }
}


& {
    #stacks-internals #flex-builder-settings(); // load @flex-cols

    //  $$  FIXED WIDTH CELLS
    //  ----------------------------------------------------------------------------
    #stacks-internals #flex-builder-helpers .create-fixed-cells(@flex-cols);

    //  $$  AUTO FIXED WIDTH CELLS
    //  ----------------------------------------------------------------------------
    #stacks-internals #flex-builder-helpers .create-flex-count-cols(@flex-cols);
}
//  ============================================================================
//  $   FLEX LAYOUT SPACING
//      Insert spaces or gutters in between flex cells
//  ----------------------------------------------------------------------------
.fs2    { #stacks-internals #flex-builder-helpers .gutter-spacing(@su2); }        //  2px
.fs4    { #stacks-internals #flex-builder-helpers .gutter-spacing(@su4); }        //  4px
.fs8    { #stacks-internals #flex-builder-helpers .gutter-spacing(@su8); }        //  8px
.fs12   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su12); }       //  12px
.fs16   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su16); }       //  16px
.fs24   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su24); }       //  24px
.fs32   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su32); }       //  32px
.fs48   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su48); }       //  48px
.fs64   { #stacks-internals #flex-builder-helpers .gutter-spacing(@su64); }       //  64px

//  On rows, remove top and bottom margins
.fsx {
    &,
    > .d-flex,
    > [class*="flex--cell"] {
        margin-top: 0;
        margin-bottom: 0;
    }
}

//  On columns, remove left and right margins
.fsy {
    &,
    > .d-flex,
    > [class*="flex--cell"] {
        margin-right: 0;
        margin-left: 0;
    }
}
