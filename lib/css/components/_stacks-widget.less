//
//  STACK OVERFLOW
//  SIDEBAR WIDGET
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. For documentation of all these classes and how to contribute,
//  visit https://stackoverflow.design/
//

@s-sidebarwidget-content-padding: @su16 - 1px; // subtract 1px for border
@s-sidebarwidget-content-inner-spacing: @su12; // the spacing between two adjacent simple items
@s-sidebarwidget-content-outer-spacing: @su16; // the spacing at the start/end of a group of simple items, as well as between a complex item and its separator line

/* default style */
@s-sidebarwidget-outer-border-color: @black-100;
@s-sidebarwidget-content-separator-color: @black-075;
@s-sidebarwidget-header-background-color: @black-025;

/* alternative colors */
@s-sidebarwidget-base-color-blue: @powder-100;
@s-sidebarwidget-base-color-yellow: @yellow-100;
@s-sidebarwidget-base-color-green: @green-025;

.s-sidebarwidget {
    position: relative; // so that it's the positioning parent for the :after
    border: 1px solid @s-sidebarwidget-outer-border-color;
    border-radius: @br-sm;
    box-shadow: @bs-sm;
    font-size: @fs-body1;

    &:not(.s-anchors) a:not(.button):not(.s-btn):not(.post-tag):not(.s-sidebarwidget--action) {
        &, &:visited {
            color: @black-500;
        }
    }

    // We must support things like collapsible (in particular invisble) elements, wrapper elements,
    // etc. Therefore every .-content and .-header must stand on its own; we cannot rely on things
    // like :first-child, because the *first* child may not be the first *visible* child, and it may
    // also be the :first-child of some wrapper. This is why every .-header and .-content has a
    // border-top. But because you shouldn't see the first visible item's or header's top border
    // (the widget itself provides for that border), we shift everything up by one pixel with the following pseudo-element.
    &:before {
        content: '';
        display: block;
        margin-top: -1px;
    }

    // However, because of the above, the top item's divider line now sits above the .s-sidebarwidget's top
    // border. We could fix this by using overflow: hidden, but that would constrain users of
    // .s-sidebarwidget to never have things like tooltips, autocompletes or the like that reach outside
    // the widget boundaries.
    // What we do instead is re-create the widget's top border in an absolutely positioned :after,
    // which sits above our item's top border. Technically, a tiny corner of the item's border will
    // still be visible, but at its highest point, this corner has a height of 0.27 pixels. And for
    // this sub-pixel issues, we're talking about different shades of gray. So we can live with that.
    &:after {
        content: '';
        position: absolute;
        top: -1px;
        right: -1px;
        left: -1px;
        height: 2px + @br-sm; // we need 2px border + 2px border radius to have the correct corner shape
        border-top: 1px solid @s-sidebarwidget-outer-border-color;
        border-radius: @br-sm;
        pointer-events: none; // if the top item is clickable, then we don't want to prevent clicking the top 2 pixels

        // In order to also perfectly recreate the inner corner shape, our pseudo-element needs
        // the border on all sides. But we can only do that if we're able to hide the bottom part,
        // so this only works in browsers that support clip-path.
        @supports ((-webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)) or (clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%))) or (-webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)) {
            -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 50%, 0% 50%);
            clip-path: polygon(0% 0%, 100% 0%, 100% 50%, 0% 50%);
            border: 1px solid @s-sidebarwidget-outer-border-color;
        }
    }
}

.s-sidebarwidget--header,
.s-sidebarwidget--content {
    border-top: 1px solid @s-sidebarwidget-content-separator-color;

    &:focus {
        outline: none;
    }
}


.s-sidebarwidget--header {
    padding: @s-sidebarwidget-content-inner-spacing @s-sidebarwidget-content-padding;
    background: @s-sidebarwidget-header-background-color;
    color: @black-500;
    font-size: @fs-body2;
    font-weight: normal;

    &.s-sidebarwidget__small-bold-text {
        font-size: @fs-caption;
        font-weight: bold;
        .-action {
            font-weight: normal;
            line-height: 1.3*@fs-caption;  // line-height should be the same as in the outside element, so the header and action baselines line up
        }
    }

    &.s-sidebarwidget__collapsing-control {
        cursor: pointer;
        &:before {
            content: '';
            float: left;
            margin-top: ~"calc(1.3em / 2 - 5px)"; // 1.3 is our standard line height
            margin-right: @su12;
            border: 5px solid transparent;
            border-left-color: @black-200;
            border-right-width: 0;
            transition: -webkit-transform 0.3s cubic-bezier(0.4, 0.4, 0.6, 1);
            transition: transform 0.3s cubic-bezier(0.4, 0.4, 0.6, 1);
            transition: transform 0.3s cubic-bezier(0.4, 0.4, 0.6, 1), -webkit-transform 0.3s cubic-bezier(0.4, 0.4, 0.6, 1);
        }
        &[aria-expanded='true']:before {
            -webkit-transform: rotate(90deg);
                    transform: rotate(90deg);
        }
    }
}

.s-sidebarwidget--action {
    float: right;
    margin: 0 0 @su4 @su8;
    color: @blue;
    font-size: @fs-fine;
    line-height: 1.3*15px; // line-height should be the same as in the outside element, so the header and action baselines line up
}

table.s-sidebarwidget--content.s-sidebarwidget__items {
    padding: (@s-sidebarwidget-content-outer-spacing - @s-sidebarwidget-content-inner-spacing) (@s-sidebarwidget-content-padding - @s-sidebarwidget-content-inner-spacing);
    border-collapse: separate;
    border-spacing: @s-sidebarwidget-content-inner-spacing;

    tr.-item {
        display: table-row;
        td {
            padding: 0;
        }
    }
}

.s-sidebarwidget--content:not(table) {
    &:not(.s-sidebarwidget__items) {
        display: flex;
    }
    &:not(.s-sidebarwidget__block-items) .s-sidebarwidget--item {
        display: flex;
    }
}

.s-sidebarwidget--content {
    margin: 0;
    padding: @s-sidebarwidget-content-outer-spacing @s-sidebarwidget-content-padding;

    &.s-sidebarwidget__items {
        display: block;
        // the items themselves provide part of the spacing, so the content padding needs to account for that
        padding: (@s-sidebarwidget-content-outer-spacing - @s-sidebarwidget-content-inner-spacing) @s-sidebarwidget-content-padding;
        &.s-sidebarwidget__block-items .s-sidebarwidget--item {
            .d-block;
        }
    }
}

.s-sidebarwidget--item {
    margin: @s-sidebarwidget-content-inner-spacing 0;

    &, & > :first-child {
        &[aria-current="true"], &[aria-current="page"] {
            position: relative;
            color: @black;
            font-weight: bold;

            &:before {
                content: '';
                position: absolute;
                left: 0;
                height: ~"calc(100% +" @s-sidebarwidget-content-inner-spacing ~")";
                margin-top: -@s-sidebarwidget-content-inner-spacing/2;
                margin-left: -@s-sidebarwidget-content-padding - 1px; // the orange selection indicator overlaps with the widget border
                border-left: 3px solid @orange;
            }

            a, a:visited { // TODO: this isn't the best way to go about this. There should be a "is current" highlight without font modification for more complex cases
                color: inherit;
            }
        }
    }
}
.s-sidebarwidget--subnav {
    list-style-type: none;
    padding-left: 0;

    li {
        margin-top: 12px;
        padding-left: 16px;
        background-position: 0 ~"calc((1.2em - 10px)/2)";
        background-repeat: no-repeat;
        background-size: auto 10px;

        .bullet-arrow(@col) {
            @image: '<?xml version="1.0" encoding="UTF-8"?><svg version="1.1" viewBox="0 0 7 10" xmlns="http://www.w3.org/2000/svg"><path d="m0.72153 0.68446 4.1336 4.3077-4.1336 4.3077" fill="none" stroke="@{col}" stroke-width="2"/></svg>';
            @encoded-image: escape(@image);
            background-image: url("data:image/svg+xml,@{encoded-image}");
        }

        .bullet-arrow(@black-100);

        &[aria-current="true"], &[aria-current="page"] {
            .bullet-arrow(@orange);
            color: @black;
            font-weight: bold;

            a, a:visited { // TODO: see above
                color: inherit;
            }
        }
    }
}

// COLOR ALTERNATIVES
// todo: use CSS custom properties for this once we don't care about IE anymore

.alternate-color(blue);
.alternate-color(yellow);
.alternate-color(green);

.alternate-color(@name) {
    &.s-sidebarwidget__@{name} {
        @base-col-name: "s-sidebarwidget-base-color-@{name}";
        @base-col: @@base-col-name;
        @border-col: mix(black, @base-col, 10%);
        @header-bg-col: mix(black, @base-col, 3%);
        @content-bg-col: @base-col;
        @seperator-col: mix(black, @base-col, 7%);
        @header-text-col: mix(black, @base-col, 55%);
        border-color: @border-col;
        background-color: @content-bg-col;

        .s-sidebarwidget--header {
            background-color: @header-bg-col;
            color: @header-text-col;
        }

        .s-sidebarwidget--header, .s-sidebarwidget--content {
            border-color: @seperator-col;
        }

        &:after {
            border-color: @border-col;
        }
    }
}


// see http://stackoverflow.com/a/43965099 for how this works:
// TODO: this is very generic, so it probably shouldn't just be used for s-sidebarwidget

// Notes on the clip-path stuff: What we would really like is overflow: hidden during the transition,
// but not when the element is expanded. Unfortunately, although the CSS spec provides for it, there's
// no browser support yet for transitioning non-interpolatable properties, and therefore we cannot say
// "change overflow to visible *after* the transition".
//
// So we use clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%), which is essentially the same
// as overflow: hidden, but unlike overflow, clip-path is interpolatable -- but only if the opposite state
// is also a polygon, and has the same vertice count. So our version of overflow: visible is a rectangle
// of 2x2 million pixels, which should be enough for everybody (TM).
//
// At the time of writing, clip-path works in Chrome, Firefox Beta, and Safari (with vendor prefix).
//
// In browsers that do not support this yet, we have to have another way to prevent the collapsible content
// from being visible below the bottom edge during the transition, and the best I could come up with is
// transitioning to scaleY(0) with a timing function that's faster than the height-reducing transitions.
// This does kinda look like a deliberate effect, even more so if we also transition to transparency
// (which we therefore do), so I feel it's an okay fallback.
//
// We still set overflow to hidden in the collapsed state (which also applies to the collapsing transition),
// we just can't do that for the expanding transition.
//
// A major drawback of clip-path is that even though the content is clipped (not visible), it will still
// contribute to the document height. This caused a jumping around of the scrollbar (and possibly even
// of the viewport) when the collapsible was at the bottom of the page, because once the negative bottom
// margin of the -collapsible-group exceeds the actual height, any additional pixels were added on to the
// bottom. The fix is to set the -collapsible-group's flex alignment to flex-start, which forces the
// (no longer visible) element itself to remain at the top, thereby forcing the excess pixels to be added
// above the top, not below the bottom. And because extending content above the document top will not do
// anything to the document height, there is no jumping during the transition.

@s-collapsible-transition-duration: 100ms;

.s-collapsible {
    @s-collapsible-transition-duration: 100ms;
    display: flex;
    -webkit-clip-path: polygon(-1000000px -1000000px, 1000000px -1000000px, 1000000px 1000000px, -1000000px 1000000px);
    clip-path: polygon(-1000000px -1000000px, 1000000px -1000000px, 1000000px 1000000px, -1000000px 1000000px);
    align-items: flex-start; // see comment above
    transition: clip-path 0s @s-collapsible-transition-duration, -webkit-clip-path 0s @s-collapsible-transition-duration;

    &:after {
        content: '';
        -ms-flex-preferred-size: 0;
            flex-basis: 0;
        height: 50px;
        max-height: 0px;
        transition: height @s-collapsible-transition-duration linear,
                    max-height 0s @s-collapsible-transition-duration linear;
    }
}

.s-collapsible--content {
    -ms-flex-preferred-size: 100%;
        flex-basis: 100%;
    max-height: 1000000px;
    margin-bottom: 0;
    -webkit-transform-origin: 0 0;
            transform-origin: 0 0;
    transition: margin-bottom @s-collapsible-transition-duration cubic-bezier(0, 0, 0, 1),
                transform @s-collapsible-transition-duration cubic-bezier(1, 0, 1, 1),
                opacity @s-collapsible-transition-duration cubic-bezier(1, 0, 1, 1);
}

.s-collapsible.is-collapsed {
    overflow: hidden;
    -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
    transition: none;

    .s-collapsible--content {
        visibility: hidden;
        max-height: 0;
        margin-bottom: -1500px;
        opacity: 0;
        -webkit-transform: scaleY(0);
                transform: scaleY(0);
        transition: margin-bottom @s-collapsible-transition-duration cubic-bezier(1, 0, 1, 1),
                    visibility 0s @s-collapsible-transition-duration,
                    max-height 0s @s-collapsible-transition-duration,
                    transform @s-collapsible-transition-duration cubic-bezier(0, 1, 1, 1),
                    opacity @s-collapsible-transition-duration cubic-bezier(0, 1, 1, 1);
        @supports ((-webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)) or (clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%))) {
            opacity: 1;
            -webkit-transform: none;
                    transform: none;
        }
    }

    &:after {
        height: 0;
        max-height: 50px;
        transition: height @s-collapsible-transition-duration linear;
    }
}
