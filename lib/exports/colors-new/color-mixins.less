@import (reference) "../mixins.less";
@import (reference) "./color-sets.less";
@import (reference) "./theme.less";

// Function to generate colors based on context
// TODO document
.generate-colors(@family: default, @highContrast: false) {
    @setName: if(@highContrast = true, "@{family}-hc", "@{family}");
    @set: .sets()[$@setName];

    .create-colors(@set);

    & when (@family = default) {
         // Create base and default theme variables
        .create-colors(.sets-theme-default());
         // Create base and default theme classes
         .create-colors(@set, classes);
        .create-colors(.sets-theme-default(), classes);
    }

    & when not (@family = default) {
        & when (@highContrast = false) {
            &,
            & .themed {
                color: var(--theme-body-font-color-new); // TODO define variable
                .create-theme-hsl-rgb-variables(~"theme-@{family}");
                .create-colors(@set);
                &:extend(.theme-variables);
            }
        }
    }
}

// TODO add usage example
/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * @param {list} @sets - A list of sets containing color names and values.
 * @param {variables | classes} @type - (Optional) The type of output.
 */
.create-colors(@sets, @type: variables) {
    each(@sets, .(@set, @kSet, @iSet) {
      @name: @kSet;
      @colors: @set;

      each(@set, .(@item, @kItem, @iItem) {
        @suffix: if((@kItem = default), "-new", ~"-new-@{kItem}");
        @colorName: ~"@{name}@{suffix}";
        @variable: ~"--@{colorName}";
        @value: ~"var(@{variable}) !important;";

          // Create custom property assignment
          & when (@type = variables) {
              @{variable}: @item;
          }

        //   // Create bg atomic class assignments
          & when (@type = classes) {
              .create-color-classes(@colorName, @value);
          }

      })
  });
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @param {string} @name - the name to be used as the suffix to each class.
 * @param {color} @value - The color property value to be assigned.
 */
.create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

// THEMING
/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-calculated-themed-variables() (referenced in Core)
 *
 * Usage example:
 * .create-custom-theme-hsl-rgb-variables("#ff1100", secondary, dark);
 *
 * @param {string} @color - The color to be used as the base.
 * @param {primary | secondary} @designation - The designation of the theme values.
 * @param {base | dark} @theme - TODO add documentation
 */
.create-custom-theme-hsl-rgb-variables(@color, @designation: primary, @theme: base) {
    @var-base: ~"--theme-@{theme}-@{designation}-color-new";

    // Split into h/s/l values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-h: hue(@color);
    @{var-base}-s: saturation(@color);
    @{var-base}-l: lightness(@color);

    // Split into r/g/b values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-r: red(@color);
    @{var-base}-g: green(@color);
    @{var-base}-b: blue(@color);
}

/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-themed-variables() (not referenced in Core)
 *
 * Usage example:
 * .create-theme-hsl-rgb-variables(theme-light);
 *
 * @param {string} @theme - TODO add documentation
 */
.create-theme-hsl-rgb-variables(@theme: theme) {
    @designations: primary, secondary;
    @suffixes: h, s, l, r, g, b;

    each(@designations, .(@designation, @key, @index) {
        each(@suffixes, .(@suffix, @k, @i) {
            @endStr: ~"@{designation}-color-new-@{suffix}";
            @variable: ~"--theme-@{endStr}";
            @val: ~"--@{theme}-@{endStr}";
            @fallback: ~"--theme-base-@{endStr}";

            @{variable}: ~"var(@{val}, var(@{fallback}))";
        });
    });
}

// TODO add description
.create-custom-theme-variables(@mode: light) {
    @designations: primary, secondary;
    each(@designations, .(@designation, @k, @i) {
        @base: ~"theme-@{designation}";
        @baseColorName: ~"@{base}-color-new";
        @mainVar: ~"--@{baseColorName}";

        .custom-theme-colors() {
            light: .custom-light-theme();
            dark: .custom-dark-theme();
        }

        .custom-light-theme() {
            900: .native-darken(@baseColorName, 26)[];
            800: .native-darken(@baseColorName, 21)[];
            700: .native-darken(@baseColorName, 16)[];
            600: .native-darken(@baseColorName, 10)[];
            500: .native-darken(@baseColorName, 5)[];
            400: ~"var(@{mainVar})";
            350: .native-tint(@baseColorName, 20)[];
            300: .native-tint(@baseColorName, 35)[];
            200: .native-tint(@baseColorName, 48)[];
            150: .native-tint(@baseColorName, 65)[];
            100: .native-tint(@baseColorName, 78)[];
            075: .native-tint(@baseColorName, 85)[];
            050: .native-tint(@baseColorName, 92)[];
            025: .native-tint(@baseColorName, 96)[];
        }

        .custom-dark-theme() {
            025: .native-darken-desaturate(@baseColorName, 31, 73.3)[];
            050: .native-darken-desaturate(@baseColorName, 15, 47)[];
            075: .native-darken-desaturate(@baseColorName, 13, 39)[];
            100: .native-darken-desaturate(@baseColorName, 11, 32)[];
            150: .native-darken-desaturate(@baseColorName, 9, 23)[];
            200: .native-darken-desaturate(@baseColorName, 7, 15)[];
            300: .native-darken-desaturate(@baseColorName, 5, 7)[];
            350: ~"var(@{mainVar})";
            400: .native-tint(@baseColorName, 21)[];
            500: .native-tint(@baseColorName, 36)[];
            600: .native-tint(@baseColorName, 51)[];
            700: .native-tint(@baseColorName, 66)[];
            800: .native-tint(@baseColorName, 81)[];
            900: .native-tint(@baseColorName, 96)[];
        }

        @{mainVar}: .assemble-color(@baseColorName)[];
        --focus-ring: .native-fade(theme-secondary-color-new, if(@mode = light, 15, 25))[];
        each(.custom-theme-colors()[$@mode], .(@value, @stop, @index) {
            @variable: ~"--@{baseColorName}-@{stop}";
            @{variable}: @value;
        });
    });
}
