@import (reference) "../mixins.less";
@import (reference) "./color-sets.less";
@import (reference) "./theme.less";

// TODO file-wide: remove "new" suffix when old colors are labelled "legacy"

// Type definitions
//
// @mode: default | light | dark | light-highcontrast | dark-highcontrast;
// @modeCustom: base | dark; // legacy we're supporting for theming in Core
// @modeSimple: light | dark; // TODO consider different name?
// @set: { [key: stop]: color }[];
// @sets: set[] | { [key: string]: set }[];
// @stop: default | 050 | 100 | 150 | 200 | 225 | 300 | 350 | 400 | 500 | 600;
// @tier: primary | secondary;
// @type: classes | variables;

/**
 * Primary function to generate colors variables for a given mode.
 *
 * Usage example:
 * .generate-colors(dark);
 *
 * @mode - Determines what to generate and which mode set to use.
*/
.generate-colors(@mode: default) {
    @set: .sets-mode()[$@mode];

    .create-colors(@set);

    & when (@mode = default) {
        // Create base and default theme variables
        .create-colors(.sets-theme-default());
        // Create base and default theme classes
        .create-colors(@set, classes);
        .create-colors(.sets-theme-default(), classes);
    }

    & when (@mode = light), (@mode = dark) {
        &,
        & .themed {
            color: var(--theme-body-font-color-new); // TODO define variable
            .create-colors(@set);
            .create-theme-hsl-rgb-variables(@mode);
            &:extend(.theme-variables);
        }
    }
}

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * .create-colors(.sets-mode()[dark], classes);
 *
 * @sets - (required) A collection of name/set pairs.
 * @type - The type of output.
 */
.create-colors(@sets, @type: variables) {
    each(@sets, .(@set, @setName, @iSet) {
        each(@set, .(@value, @stop, @iColorValue) {
            @suffix: if((@stop = default), "-new", ~"-new-@{stop}");
            @name: ~"@{setName}@{suffix}";
            @variable: ~"--@{name}";

            // Create custom property assignment
            & when (@type = variables) {
                @{variable}: @value;
            }

            // Create bg atomic class assignments
            & when (@type = classes) {
                @customValue: ~"var(@{variable}) !important";
                .create-color-classes(@name, @customValue);
            }
        });
  });
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @name - (required) Used as a suffix to each class.
 * @value - (required) The value assigned to the generated class' property.
 */
.create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

// THEMING
/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-calculated-themed-variables() (referenced in Core)
 * Maintains API parity with .generate-calculated-themed-variables()
 *
 * Usage example:
 * .create-custom-theme-hsl-rgb-variables("#ff1100", secondary, dark);
 *
 * @color - (required) The color to be used to generate h/s/g and /r/g/b values.
 * @tier - The tier name to be used to generate the variable name.
 * @modeCustom - A custom label to be used to generate the variable name.
 */
.create-custom-theme-hsl-rgb-variables(@color, @tier: primary, @modeCustom: base) {
    @varBase: ~"--theme-@{modeCustom}-@{tier}-color-new";
    @{varBase}-h: hue(@color);
    @{varBase}-s: saturation(@color);
    @{varBase}-l: lightness(@color);
    @{varBase}-r: red(@color);
    @{varBase}-g: green(@color);
    @{varBase}-b: blue(@color);
}

/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-themed-variables() (not referenced in Core)
 *
 * Usage example:
 * .create-theme-hsl-rgb-variables(light);
 *
 * @modeSimple - Determines what to generate and which mode set to use.
 */
.create-theme-hsl-rgb-variables(@modeSimple: light) {
    @tiers: primary, secondary;
    @suffixes: h, s, l, r, g, b;

    each(@tiers, .(@tier, @key, @index) {
        each(@suffixes, .(@suffix, @k, @i) {
            @endStr: ~"@{tier}-color-new-@{suffix}";
            @variable: ~"--theme-@{endStr}";

            @{variable}: ~"var(--theme-@{modeSimple}-@{endStr}, var(--theme-base-@{endStr}))";
        });
    });
}

/**
 * Generates theme variables with values mapped to custom hsl values
 *
 * Usage example:
 * .create-theme-hsl-rgb-variables(dark);
 *
 * @modeSimple - Determines what to generate and which mode set to use.
 */
.create-custom-theme-variables(@modeSimple: light) {
    @tiers: primary, secondary;

    each(@tiers, .(@tier, @k, @i) {
        @baseColorName: ~"theme-@{tier}-color-new";
        @mainVariable: ~"--@{baseColorName}";

        .custom-theme-colors() {
            light: .custom-light-theme();
            dark: .custom-dark-theme();
        }

        .custom-light-theme() {
            900: .native-darken(@baseColorName, 26)[]; // hsl(var-h, var-s, var-l - 26%)
            800: .native-darken(@baseColorName, 21)[];
            700: .native-darken(@baseColorName, 16)[];
            600: .native-darken(@baseColorName, 10)[];
            500: .native-darken(@baseColorName, 5)[];
            400: ~"var(@{mainVariable})";
            350: .native-tint(@baseColorName, 20)[];
            300: .native-tint(@baseColorName, 35)[];
            200: .native-tint(@baseColorName, 48)[];
            150: .native-tint(@baseColorName, 65)[];
            100: .native-tint(@baseColorName, 78)[];
            075: .native-tint(@baseColorName, 85)[];
            050: .native-tint(@baseColorName, 92)[];
            025: .native-tint(@baseColorName, 96)[];
        }

        .custom-dark-theme() {
            025: .native-darken-desaturate(@baseColorName, 31, 73.3)[];
            050: .native-darken-desaturate(@baseColorName, 15, 47)[];
            075: .native-darken-desaturate(@baseColorName, 13, 39)[];
            100: .native-darken-desaturate(@baseColorName, 11, 32)[];
            150: .native-darken-desaturate(@baseColorName, 9, 23)[];
            200: .native-darken-desaturate(@baseColorName, 7, 15)[];
            300: .native-darken-desaturate(@baseColorName, 5, 7)[];
            350: ~"var(@{mainVariable})";
            400: .native-tint(@baseColorName, 21)[];
            500: .native-tint(@baseColorName, 36)[];
            600: .native-tint(@baseColorName, 51)[];
            700: .native-tint(@baseColorName, 66)[];
            800: .native-tint(@baseColorName, 81)[];
            900: .native-tint(@baseColorName, 96)[];
        }

        @{mainVariable}: .assemble-color(@baseColorName)[];
        --focus-ring-new: .native-fade(
            theme-secondary-color-new,
            if(@modeSimple = light, 15, 25)
        )[];

        each(.custom-theme-colors()[$@modeSimple], .(@value, @stop, @index) {
            @variable: ~"--@{baseColorName}-@{stop}";
            @{variable}: @value;
        });
    });
}
