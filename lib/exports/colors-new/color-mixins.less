@import (reference) "../mixins.less";

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @colors: 100 hsl(23, 85%, 97%), 200 hsl(23, 85%, 97%), ‚Ä¶;
 * .create-color(orange, @colors, length(@colors), variable);
 *
 * @param {string} @name - The color family the colors belong to.
 * @param {list} @colors - A sets containing color stops and values.
 * @param {string} @i - The index of the color to process, starting from the color set.
 * @param {string} @type - The type of output: "variable" or "classes".
 * @param {string} @private - Designate a private variable.
 */
.create-color(@name, @colors, @i, @type, @private) when (@i > 0) {
    @item: extract(@colors, @i);
    @stop: extract(@item, 1);
    @color: extract(@item, 2);

    // TODO get rid of "new" suffix when old colors are labelled legacy
    @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");
    @color-name: ~"@{name}@{suffix}";
    @variable: if(@private, ~"--_@{color-name}", ~"--@{color-name}") ;
    @property-value: ~"var(@{variable}) !important";

    // Create custom property assignment
    & when not (@type = classes) {
        @{variable}: @color;
    }

    // Create bg atomic class assignments
    & when (@type = classes) {
        .create-color-classes(@color-name, @property-value);
    }

    .create-color(@name, @colors, @i - 1, @type, @private);
}

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @color-sets:
 *     orange (100 hsl(23, 85%, 97%), 200 hsl(27, 85%, 87%), ‚Ä¶),
 *     blue (100 hsl(210, 80%, 96%), 200 hsl(210, 80%, 91%), ‚Ä¶);
 * .create-colors(@color-sets, length(@color-sets), classes);
 *
 * @param {list} @sets - A list of sets containing color names and values.
 * @param {number} @i - The index of the set to process, starting from the last set.
 * @param {string} @type - (Optional) The type of output: "variable" (default), "private-variable" or "classes".
 */
.create-colors(@sets, @i, @type: variable, @private: true) when (@i > 0) {
    @set: extract(@sets, @i);
    @name: extract(@set, 1);
    @colors: extract(@set, 2);

    .create-color(@name, @colors, length(@colors), @type, @private);
    .create-colors(@sets, @i - 1, @type);
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @param {string} @color-name - the name to be used as the suffix to each class.
 * @param {color} @property-value - The color property value to be assigned.
 */
.create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

// TODO add documentation
.create-calculated-themed-variables(@color, @designation: primary, @theme: base) {
    @var-base: ~"--theme-@{theme}-@{designation}-color-new";

    // Split into h/s/l values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-h: hue(@color);
    @{var-base}-s: saturation(@color);
    @{var-base}-l: lightness(@color);

    // Split into r/g/b values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-r: red(@color);
    @{var-base}-g: green(@color);
    @{var-base}-b: blue(@color);
}

/**
 * Creates theme-specific CSS variable-based atomic classes for background and text colors based on a set of color stops.
 *
 * Usage example:
 * .create-theme-classes(primary, orange);
 *
 * @param {string} @theme - The name of the theme.
 * @param {string} @type - (Optional) The type of output: "variable" (default) or "classes".
 */
.create-theme-classes(@theme) {
    @stops: 100 200 300 400 500 600;

    .create-theme-classes-loop(@i) when (@i > 0) {
        @stop: extract(@stops, @i);
        // TODO get rid of "new" suffix when old colors are labelled legacy
        @theme-name: ~"theme-@{theme}-new-@{stop}";
        @value: ~"var(--@{theme-name}) !important";

        .create-color-classes(@theme-name, @value);
        .create-theme-classes-loop(@i - 1);
    }

    .create-theme-classes-loop(length(@stops));
}

// TODO add documentation
.create-theme-variables(@designation, @color: "", @theme: base) {
    @set-name: ~"theme-@{designation}";
    @name-base: ~"@{set-name}-color";
    @name: ~"@{name-base}-new";
    --@{name}: .assemble-color(@name)[];

    // When @color is empty, use the default color set
    & when (@color = "") {
        @set: if(
            @designation = primary,
            if(@theme = base, @set-orange, @set-orange-dark),
            if(@theme = base, @set-blue, @set-blue-dark)
        );
        // TODO this does not work with only a single name + set pair ü§∑‚Äç‚ôÇÔ∏è
        @name-set: @set-name @set, @set-name @set;
        .create-colors(@name-set, length(@name-set), variable, false);
    }

    // & when not (@color = "") {
    //     @set-base:
    //         100 lighten(@color, 92%),
    //         200 lighten(@color, 65%),
    //         300 lighten(@color, 35%),
    //         400 @color,
    //         500 darken(@name, 16%),
    //         600 darken(@name, 26%);
    //     // @set-dark:
    //     //     100 .native-darken-desaturate(@name, 15, 47)[],
    //     //     200 .native-darken-desaturate(@name, 11, 32)[],
    //     //     300 .native-darken-desaturate(@name, 7, 15)[],
    //     //     400 @color,
    //     //     500 .native-tint(@name, 51)[],
    //     //     600 .native-tint(@name, 81)[];

    //     @set: if(@theme = base, @set-orange, @set-orange-dark);

    //     --testing: @set-name;
        // @name-set: xxx @set, yyy @set;
        // .create-colors(@name-set, length(@name-set), variable, false);
    }
}