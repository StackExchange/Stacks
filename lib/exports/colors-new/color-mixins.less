/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @colors: 100 hsl(23, 85%, 97%), 200 hsl(23, 85%, 97%), …;
 * .create-color(orange, @colors, length(@colors), variable);
 *
 * @param {string} @name - The color family the colors belong to.
 * @param {list} @colors - A sets containing color stops and values.
 * @param {string} @i - The index of the color to process, starting from the color set.
 * @param {string} @type - The type of output: "variable" or "classes".
 */
.create-color(@name, @colors, @i, @type) when (@i > 0) {
    @item: extract(@colors, @i);
    @stop: extract(@item, 1);
    @color: extract(@item, 2);

    // TODO get rid of "new" suffix when old colors are labelled legacy
    @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");
    @color-name: ~"@{name}@{suffix}";
    @variable: ~"--_@{color-name}";
    @property-value: ~"var(@{variable}) !important";

    // Create custom property assignment
    & when (@type = variable) {
        @{variable}: @color;
    }

    // Create bg atomic class assignments
    & when (@type = classes) {
        .create-color-classes(@color-name, @property-value);
    }

    .create-color(@name, @colors, @i - 1, @type);

}

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @color-sets:
 *     orange #(100 hsl(23, 85%, 97%), 200 hsl(27, 85%, 87%), …),
 *     blue #(100 hsl(210, 80%, 96%), 200 hsl(210, 80%, 91%), …);
 * .create-colors(@color-sets, length(@color-sets), classes);
 *
 * @param {list} @sets - A list of sets containing color names and values.
 * @param {number} @i - The index of the set to process, starting from the last set.
 * @param {string} @type - (Optional) The type of output: "variable" (default) or "classes".
 */
.create-colors(@sets, @i, @type: variable) when (@i > 0) {
    @set: extract(@sets, @i);
    @name: extract(@set, 1);
    @colors: extract(@set, 2);

    .create-color(@name, @colors, length(@colors), @type);
    .create-colors(@sets, @i - 1, @type);
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @param {string} @color-name - the name to be used as the suffix to each class.
 * @param {color} @property-value - The color property value to be assigned.
 */
 .create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .xxx,
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

// TODO add documentation
.create-calculated-themed-variables(@color, @designation: primary, @theme: base) {
    @var-base: ~"--theme-@{theme}-@{designation}-color-new";

    // Split into h/s/l values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-h: hue(@color);
    @{var-base}-s: saturation(@color);
    @{var-base}-l: lightness(@color);

    // Split into r/g/b values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-r: red(@color);
    @{var-base}-g: green(@color);
    @{var-base}-b: blue(@color);
}

/**
 * Creates theme-specific CSS variable-based atomic classes for background and text colors based on a set of color stops.
 *
 * Usage example:
 * .create-theme-classes(primary, orange);
 *
 * @param {string} @theme - The name of the theme.
 * @param {string} @fallback - The base color name used for fallback if theme color is not defined.
 */
.create-theme-classes(@theme, @fallback) {
    @stops: 100 200 300 400 500 600;

    .create-theme-class(@i) when (@i > 0) {
        @stop: extract(@stops, @i);
        // TODO get rid of "new" suffix when old colors are labelled legacy
        @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");

        @theme-name: ~"theme-@{theme}@{suffix}";
        @theme-variable: ~"--theme-@{theme}@{suffix}";
        @fallback-variable: ~"--_@{fallback}@{suffix}";

        @value: ~"var(@{theme-variable}, var(@{fallback-variable})) !important";

        .create-color-classes(@theme-name, @value);
        .create-theme-class(@i - 1);
    }

    .create-theme-class(length(@stops));
}
