@import (reference) "../mixins.less";
@import (reference) "./theme.less";


/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @colors: 100 hsl(23, 85%, 97%), 200 hsl(23, 85%, 97%), ‚Ä¶;
 * .create-color(orange, @colors, length(@colors), variable);
 *
 * @param {string} @name - The color family the colors belong to.
 * @param {list} @colors - A sets containing color stops and values.
 * @param {string} @i - The index of the color to process, starting from the color set.
 * @param {variable | classes} @type - The type of output
 * @param {bool} @private - Designate a private variable.
 */
.create-color(@name, @colors, @i, @type, @private: false) when (@i > 0) {
    @item: extract(@colors, @i);
    @stop: extract(@item, 1);
    @color: extract(@item, 2);

    // TODO get rid of "new" suffix when old colors are labelled legacy
    @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");
    @color-name: ~"@{name}@{suffix}";
    @variable: ~"--@{color-name}";
    @property-value: ~"var(@{variable}) !important";

    // Create custom property assignment
    & when (@type = variables) {
        @{variable}: @color;
    }

    // Create bg atomic class assignments
    & when (@type = classes) {
        .create-color-classes(@color-name, @property-value);
    }

    .create-color(@name, @colors, @i - 1, @type, @private);
}

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @color-sets:
 *     orange (100 hsl(23, 85%, 97%), 200 hsl(27, 85%, 87%), ‚Ä¶),
 *     blue (100 hsl(210, 80%, 96%), 200 hsl(210, 80%, 91%), ‚Ä¶);
 * .create-colors(@color-sets, length(@color-sets), classes);
 *
 * @param {list} @sets - A list of sets containing color names and values.
 * @param {number} @index - The index of the set to process, starting from the last set.
 * @param {variables | classes} @type - (Optional) The type of output.
 * @param {bool} @private - Create private variables.
 */
.create-colors(@sets, @index, @type: variables, @private: true) when (@index > 0) {
    @set: extract(@sets, @index);
    @name: extract(@set, 1);
    @colors: extract(@set, 2);

    .create-color(@name, @colors, length(@colors), @type, @private);
    .create-colors(@sets, @index - 1, @type);
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @param {string} @name - the name to be used as the suffix to each class.
 * @param {color} @value - The color property value to be assigned.
 */
.create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-calculated-themed-variables() (referenced in Core)
 * Keep API same as .generate-calculated-themed-variables()
 *
 * Usage example:
 * .create-custom-theme-hsl-rgb-variables("#ff1100", secondary, dark);
 *
 * @param {string} @color - The color to be used as the base.
 * @param {primary | secondary} @designation - The designation of the theme values.
 * @param {base | dark} @theme - TODO add documentation
 */
 .create-custom-theme-hsl-rgb-variables(@color, @designation: primary, @theme: base) {
    @var-base: ~"--theme-@{theme}-@{designation}-color-new";

    // Split into h/s/l values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-h: hue(@color);
    @{var-base}-s: saturation(@color);
    @{var-base}-l: lightness(@color);

    // Split into r/g/b values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-r: red(@color);
    @{var-base}-g: green(@color);
    @{var-base}-b: blue(@color);
}

/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-themed-variables() (not referenced in Core)
 *
 * Usage example:
 * .create-theme-hsl-rgb-variables(theme-light);
 *
 * @param {string} @theme - TODO add documentation
 */
.create-theme-hsl-rgb-variables(@theme: theme) {
    @designations: primary, secondary;
    @suffixes: h, s, l, r, g, b;

    each(@designations, .(@designation, @key, @index) {
        each(@suffixes, .(@suffix, @k, @i) {
            @endStr: ~"@{designation}-color-new-@{suffix}";
            @variable: ~"--theme-@{endStr}";
            @val: ~"--@{theme}-@{endStr}";
            @fallback: ~"--theme-base-@{endStr}";

            @{variable}: ~"var(@{val}, var(@{fallback}))";
        });
    });
}

/**
 * Creates theme-specific CSS variable-based atomic classes for background and text colors based on a set of color stops.
 *
 * Usage example:
 * .create-theme-classes(primary, orange);
 *
 * @param {primary | secondary} @designation - The designation of the theme values.
 * @param {classes | variables} @type = The type of output.
 * @param {string} @color - The color to be used as the base for the theme variables.
 * @param {base | dark} @theme - TODO add documentation
 */
.create-theme(@designation: primary, @type: classes, @color: "", @theme: base) {
    @stops: 100, 200, 300, 400, 500, 600;

    & when (@type = classes) {
        each(@stops, .(@stop, @k, @i) {
            // TODO get rid of "new" suffix when old colors are labelled legacy
            @theme-name: ~"theme-@{designation}-new-@{stop}";
            @value: ~"var(--@{theme-name}) !important";
            .create-color-classes(@theme-name, @value);
        });
    }

    & when (@type = variables) {
        @set-name: ~"theme-@{designation}";
        @name-base: ~"@{set-name}-color";
        @name: ~"@{name-base}-new-xxx";
        // --@{name}: .assemble-color(@name)[];

        // --theme-@{designation}-color-new: var(~"--theme-@{designation}-new-400");

        // When @color is empty, use the default color set
        & when (@color = "") {
            @set: if(
                @designation = primary,
                if(@theme = base, @set-orange, @set-orange-dark),
                if(@theme = base, @set-blue, @set-blue-dark)
            );

            // TODO this does not work with only a single name + set pair ü§∑‚Äç‚ôÇÔ∏è
            @sets: @set-name @set, @set-name @set;
            .create-colors(@sets, length(@sets), variables, false);
        }

        & when not (@color = "") {
            & when (@theme = base) {
                    // Reassemble as a single hsl value
                --theme-primary-new-color: .assemble-color(theme-primary-color)[];

                // Steps
                --theme-primary-new-900: .native-darken(theme-primary-color, 26)[];
                --theme-primary-new-800: .native-darken(theme-primary-color, 21)[];
                --theme-primary-new-700: .native-darken(theme-primary-color, 16)[];
                --theme-primary-new-600: .native-darken(theme-primary-color, 10)[];
                --theme-primary-new-500: .native-darken(theme-primary-color, 5)[];
                --theme-primary-new-400: var(--theme-primary-color);
                --theme-primary-new-350: .native-tint(theme-primary-color, 20)[];
                --theme-primary-new-300: .native-tint(theme-primary-color, 35)[];
                --theme-primary-new-200: .native-tint(theme-primary-color, 48)[];
                --theme-primary-new-150: .native-tint(theme-primary-color, 65)[];
                --theme-primary-new-100: .native-tint(theme-primary-color, 78)[];
                --theme-primary-new-075: .native-tint(theme-primary-color, 85)[];
                --theme-primary-new-050: .native-tint(theme-primary-color, 92)[];
                --theme-primary-new-025: .native-tint(theme-primary-color, 96)[];

                // Reassemble as a single hsl value
                --theme-secondary-new-color: .assemble-color(theme-secondary-color)[];

                // Steps
                --theme-secondary-new-900: .native-darken(theme-secondary-color, 26)[];
                --theme-secondary-new-800: .native-darken(theme-secondary-color, 21)[];
                --theme-secondary-new-700: .native-darken(theme-secondary-color, 16)[];
                --theme-secondary-new-600: .native-darken(theme-secondary-color, 10)[];
                --theme-secondary-new-500: .native-darken(theme-secondary-color, 5)[];
                --theme-secondary-new-400: var(--theme-secondary-color);
                --theme-secondary-new-350: .native-tint(theme-secondary-color, 20)[];
                --theme-secondary-new-300: .native-tint(theme-secondary-color, 35)[];
                --theme-secondary-new-200: .native-tint(theme-secondary-color, 48)[];
                --theme-secondary-new-150: .native-tint(theme-secondary-color, 65)[];
                --theme-secondary-new-100: .native-tint(theme-secondary-color, 78)[];
                --theme-secondary-new-075: .native-tint(theme-secondary-color, 85)[];
                --theme-secondary-new-050: .native-tint(theme-secondary-color, 92)[];
                --theme-secondary-new-025: .native-tint(theme-secondary-color, 96)[];

                // Fades
                // TODO figure out how to make "new"
                --focus-ring: .native-fade(theme-secondary-color, 15)[];
            }
            // TODO lift from .light-themed-colors() and .dark-themed-colors()
        }
    }
}
