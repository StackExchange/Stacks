@import (reference) "../mixins.less";
@import (reference) "./color-sets.less";
@import (reference) "./theme.less";

// Function to generate colors based on context
// TODO document
.generate-colors(@family: default, @highContrast: false) {
    & when (@family = default) {
        .create-colors(@sets-light, length(@sets-light)); // Create base variables
        .create-colors(@sets-light, length(@sets-light), classes); // Create base atomic classes
        .create-default-theme(); // Create default theme variables and classes
    }

    & when (@highContrast = false) {
        & when (@family = light) {
            .create-colors(@sets-light, length(@sets-light));

            &,
            & .themed {
                color: var(--theme-body-font-color-new); // TODO define variable
                .create-theme-hsl-rgb-variables(theme-light);
                .create-colors(@sets-light, length(@sets-light));
                &:extend(.theme-variables);
            }
        }

        & when (@family = dark) {
            .create-colors(@sets-dark, length(@sets-dark));

            &,
            & .themed {
                color: var(--theme-body-font-color-new); // TODO define variable
                .generate-themed-variables(theme-dark);
                .create-colors(@sets-dark, length(@sets-dark));
                &:extend(.theme-variables);
            }
        }
    }

    & when (@highContrast = true) {
        & when (@family = light) {
            .create-colors(@sets-hc, length(@sets-hc));
        }

        & when (@family = dark) {
            .create-colors(@sets-hc-dark, length(@sets-hc-dark));
        }
    }
}

/**
 * Creates color variables or atomic classes based on the given sets of colors.
 *
 * Usage example:
 * @color-sets:
 *     orange (100 hsl(23, 85%, 97%), 200 hsl(27, 85%, 87%), ‚Ä¶),
 *     blue (100 hsl(210, 80%, 96%), 200 hsl(210, 80%, 91%), ‚Ä¶);
 * .create-colors(@color-sets, length(@color-sets), classes);
 *
 * @param {list} @sets - A list of sets containing color names and values.
 * @param {number} @index - The index of the set to process, starting from the last set.
 * @param {variables | classes} @type - (Optional) The type of output.
 */
.create-colors(@sets, @index, @type: variables) when (@index > 0) {
    @set: extract(@sets, @index);
    @name: extract(@set, 1);
    @colors: extract(@set, 2);

    .create-color(@i) when (@i > 0) {
        @item: extract(@colors, @i);
        @stop: extract(@item, 1);
        @color: extract(@item, 2);

        // TODO get rid of "new" suffix when old colors are labelled legacy
        @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");
        @colorName: ~"@{name}@{suffix}";
        @variable: ~"--@{colorName}";
        @value: ~"var(@{variable}) !important";

        // Create custom property assignment
        & when (@type = variables) {
            @{variable}: @color;
        }

        // Create bg atomic class assignments
        & when (@type = classes) {
            .create-color-classes(@colorName, @value);
        }

        .create-color(@i - 1);
    }

    .create-color(length(@colors));
    .create-colors(@sets, @index - 1, @type);
}

/**
 * Creates atomic color classes for background and text color with the given color name and property value.
 *
 * Usage example:
 * .create-color-classes(red-500, var(--red-500));
 *
 * @param {string} @name - the name to be used as the suffix to each class.
 * @param {color} @value - The color property value to be assigned.
 */
.create-color-classes(@name, @value) {
    // Create bg atomic class assignments
    .bg-@{name},
    .h\:bg-@{name}:hover,
    .f\:bg-@{name}:focus,
    .f\:bg-@{name}:focus-within {
        background-color: @value;
    }

    // Create fc atomic class assignments
    .fc-@{name},
    .h\:fc-@{name}:hover,
    .f\:fc-@{name}:focus,
    .f\:fc-@{name}:focus-within {
        color: @value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{name} {
            background-color: @value;
        }
        .d\:fc-@{name} {
            color: @value;
        }
    });
}

// THEMING
/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-calculated-themed-variables() (referenced in Core)
 *
 * Usage example:
 * .create-custom-theme-hsl-rgb-variables("#ff1100", secondary, dark);
 *
 * @param {string} @color - The color to be used as the base.
 * @param {primary | secondary} @designation - The designation of the theme values.
 * @param {base | dark} @theme - TODO add documentation
 */
.create-custom-theme-hsl-rgb-variables(@color, @designation: primary, @theme: base) {
    @var-base: ~"--theme-@{theme}-@{designation}-color-new";

    // Split into h/s/l values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-h: hue(@color);
    @{var-base}-s: saturation(@color);
    @{var-base}-l: lightness(@color);

    // Split into r/g/b values
    // TODO get rid of "new" suffix when old colors are labelled legacy
    @{var-base}-r: red(@color);
    @{var-base}-g: green(@color);
    @{var-base}-b: blue(@color);
}

/**
 * Creates theme h/s/l and r/g/b variables based on the given color for a specified theme.
 * Replaces .generate-themed-variables() (not referenced in Core)
 *
 * Usage example:
 * .create-theme-hsl-rgb-variables(theme-light);
 *
 * @param {string} @theme - TODO add documentation
 */
.create-theme-hsl-rgb-variables(@theme: theme) {
    @designations: primary, secondary;
    @suffixes: h, s, l, r, g, b;

    each(@designations, .(@designation, @key, @index) {
        each(@suffixes, .(@suffix, @k, @i) {
            @endStr: ~"@{designation}-color-new-@{suffix}";
            @variable: ~"--theme-@{endStr}";
            @val: ~"--@{theme}-@{endStr}";
            @fallback: ~"--theme-base-@{endStr}";

            @{variable}: ~"var(@{val}, var(@{fallback}))";
        });
    });
}

// TODO add description
.create-default-theme() {
    @defaultThemes: primary, secondary;
    @modes: light, dark;
    @stops: 100, 200, 300, 400, 500, 600;

    each(@defaultThemes, .(@theme) {
        @setName: ~"theme-@{theme}";
        @name: ~"@{setName}-color-new";

        each(@stops, .(@stop) {
            // TODO get rid of "new" suffix when old colors are labelled legacy
            @themeName: ~"@{setName}-new-@{stop}";
            @value: ~"var(--@{themeName}) !important";
            .create-color-classes(@themeName, @value);
        });

        each(@modes, .(@mode) {
            @set: if(
                @theme = primary,
                if(@mode = light, @set-orange, @set-orange-dark),
                if(@mode = light, @set-blue, @set-blue-dark)
            );

            // TODO this does not work with only a single name + set pair ü§∑‚Äç‚ôÇÔ∏è
            @sets: @setName @set, @setName @set;
            .create-colors(@sets, length(@sets));
        });
    });

    .create-colors(@sets-theme-default, length(@sets-theme-default)); // Set default theme variables
}

/**
 * Creates theme-specific CSS variable-based atomic classes for background and text colors based on a set of color stops.
 *
 * Usage example:
 * .create-theme-classes(primary, orange);
 *
 * @param {primary | secondary} @designation - The designation of the theme values.
 * @param {string} @color - The color to be used as the base for the theme variables.
 * @param {light | dark} @mode - TODO add documentation
 */
.create-custom-theme-variables(@designation: primary, @color: "", @mode: light) {
    @stops: 100, 200, 300, 400, 500, 600;

    @set-name: ~"theme-@{designation}";
    @name-base: ~"@{set-name}-color";
    @name: ~"@{name-base}-new";
    // --@{name}: .assemble-color(@name)[];

    // --theme-@{designation}-color-new: var(~"--theme-@{designation}-new-400");

    & when (@mode = light) {
            // Reassemble as a single hsl value
        --theme-primary-new-color: .assemble-color(theme-primary-color)[];

        // Steps
        --theme-primary-new-900: .native-darken(theme-primary-color, 26)[];
        --theme-primary-new-800: .native-darken(theme-primary-color, 21)[];
        --theme-primary-new-700: .native-darken(theme-primary-color, 16)[];
        --theme-primary-new-600: .native-darken(theme-primary-color, 10)[];
        --theme-primary-new-500: .native-darken(theme-primary-color, 5)[];
        --theme-primary-new-400: var(--theme-primary-color);
        --theme-primary-new-350: .native-tint(theme-primary-color, 20)[];
        --theme-primary-new-300: .native-tint(theme-primary-color, 35)[];
        --theme-primary-new-200: .native-tint(theme-primary-color, 48)[];
        --theme-primary-new-150: .native-tint(theme-primary-color, 65)[];
        --theme-primary-new-100: .native-tint(theme-primary-color, 78)[];
        --theme-primary-new-075: .native-tint(theme-primary-color, 85)[];
        --theme-primary-new-050: .native-tint(theme-primary-color, 92)[];
        --theme-primary-new-025: .native-tint(theme-primary-color, 96)[];

        // Reassemble as a single hsl value
        --theme-secondary-new-color: .assemble-color(theme-secondary-color)[];

        // Steps
        --theme-secondary-new-900: .native-darken(theme-secondary-color, 26)[];
        --theme-secondary-new-800: .native-darken(theme-secondary-color, 21)[];
        --theme-secondary-new-700: .native-darken(theme-secondary-color, 16)[];
        --theme-secondary-new-600: .native-darken(theme-secondary-color, 10)[];
        --theme-secondary-new-500: .native-darken(theme-secondary-color, 5)[];
        --theme-secondary-new-400: var(--theme-secondary-color);
        --theme-secondary-new-350: .native-tint(theme-secondary-color, 20)[];
        --theme-secondary-new-300: .native-tint(theme-secondary-color, 35)[];
        --theme-secondary-new-200: .native-tint(theme-secondary-color, 48)[];
        --theme-secondary-new-150: .native-tint(theme-secondary-color, 65)[];
        --theme-secondary-new-100: .native-tint(theme-secondary-color, 78)[];
        --theme-secondary-new-075: .native-tint(theme-secondary-color, 85)[];
        --theme-secondary-new-050: .native-tint(theme-secondary-color, 92)[];
        --theme-secondary-new-025: .native-tint(theme-secondary-color, 96)[];

        // Fades
        // TODO figure out how to make "new"
        --focus-ring: .native-fade(theme-secondary-color, 15)[];
    }
    // TODO lift from .light-themed-colors() and .dark-themed-colors()
}
