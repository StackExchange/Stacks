.create-color-classes(@color-name, @property-value) {
    // Create bg atomic class assignments
    .bg-@{color-name},
    .h\:bg-@{color-name}:hover,
    .f\:bg-@{color-name}:focus,
    .f\:bg-@{color-name}:focus-within {
        background-color: @property-value;
    }

    // Create fc atomic class assignments
    .fc-@{color-name},
    .h\:fc-@{color-name}:hover,
    .f\:fc-@{color-name}:focus,
    .f\:fc-@{color-name}:focus-within {
        color: @property-value;
    }

    // Create dark mode atomic class assignments
    .dark-mode({
        .d\:bg-@{color-name} {
            background-color: @property-value;
        }
        .d\:fc-@{color-name} {
            color: @property-value;
        }
    });
}

// @type: "variable" | "classes"
.create-colors(@sets, @index, @type: variable) when (@index > 0) {
    @set: extract(@sets, @index);
    @name: extract(@set, 1);
    @arr: extract(@set, 2);

    .create-color(@i) when (@i > 0) {
        @value: extract(@arr, @i);
        @stop: extract(@value, 1);
        @color: extract(@value, 2);

        // TODO get rid of "new" suffix when old colors are labelled legacy
        @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");
        @color-name: ~"@{name}@{suffix}";
        @variable: ~"--_@{color-name}";
        @property-value: ~"var(@{variable}) !important";

        & when (@type = variable) {
            // Create custom property assignment
            @{variable}: @color;
        }

        & when (@type = classes) {
            // Create bg atomic class assignments
            .create-color-classes(@color-name, @property-value);
        }

        .create-color(@i - 1);
    }

    .create-color(length(@arr));
    .create-colors(@sets, @index - 1, @type);
}

.create-theme-classes(@theme, @color-name) {
    @stops: 100 200 300 400 500 600;

    .create-theme-class(@i) when (@i > 0) {
        @stop: extract(@stops, @i);
        // TODO get rid of "new" suffix when old colors are labelled legacy
        @suffix: if((@stop = ""), "-new", ~"-new-@{stop}");

        @theme-color-name: ~"theme-@{theme}@{suffix}";
        @variable: ~"--@{theme-color-name}@{suffix}";
        @fallback: ~"--_@{color-name}@{suffix}";

        @property-value: ~"var(@{variable}, var(@{fallback})) !important";

        .create-color-classes(@theme-color-name, @property-value);
        .create-theme-class(@i - 1);
    }

    .create-theme-class(length(@stops));
}

// TODO add theme sets
// White
@set-white: "" ~"hsl(0, 0%, 100%)";
@set-white-dark: "" ~"hsl(0, 0%, 0%)";
@set-white-hc: "" ~"hsl(0, 0%, 100%)";
@set-white-hc-dark: "" ~"hsl(0, 0%, 0%)";

// Black
@set-black:
    "050" ~"hsl(0, 0%, 100%)", // renders as white
    100 ~"hsl(210, 8%, 98%)",
    150 ~"hsl(210, 8%, 95%)",
    200 ~"hsl(210, 8%, 90%)",
    225 ~"hsl(210, 8%, 85%)",
    250 ~"hsl(210, 8%, 80%)",
    300 ~"hsl(213, 9%, 75%)",
    350 ~"hsl(212, 8%, 68%)",
    400 ~"hsl(210, 8%, 45%)",
    500 ~"hsl(210, 8%, 25%)",
    600 ~"hsl(210, 8%, 5%)",
    "" ~"hsl(0, 0%, 0%)"; // black, no stop // TODO check on this value
@set-black-dark:
    "050" ~"hsl(220, 3%, 15%)",
    100 ~"hsl(220, 3%, 18%)",
    150 ~"hsl(230, 4%, 21%)",
    200 ~"hsl(233, 4%, 27%)",
    225 ~"hsl(233, 4%, 30%)",
    250 ~"hsl(235, 5%, 36%)",
    300 ~"hsl(233, 4%, 47%)",
    350 ~"hsl(219, 10%, 60%)",
    400 ~"hsl(220, 10%, 74%)",
    500 ~"hsl(220, 10%, 83%)",
    600 ~"hsl(180, 11%, 98%)",
    "" ~"hsl(0, 0%, 100%)"; // white, no stop // TODO check on this value
@set-black-hc:
    "050" ~"hsl(0, 0%, 100%)", // renders as white
    100 ~"hsl(210, 8%, 98%)",
    150 ~"hsl(210, 8%, 95%)",
    200 ~"hsl(210, 8%, 90%)",
    225 ~"hsl(210, 8%, 85%)",
    250 ~"hsl(210, 8%, 80%)",
    300 ~"hsl(213, 9%, 75%)",
    350 ~"hsl(210, 8%, 45%)",
    400 ~"hsl(210, 8%, 45%)",
    500 ~"hsl(210, 8%, 25%)",
    600 ~"hsl(210, 8%, 5%)",
    "" ~"hsl(0, 0%, 0%)"; // black, no stop // TODO check on this value
@set-black-hc-dark:
    "050" ~"hsl(220, 3%, 15%)",
    100 ~"hsl(220, 3%, 18%)",
    150 ~"hsl(230, 4%, 21%)",
    200 ~"hsl(233, 4%, 27%)",
    225 ~"hsl(233, 4%, 30%)",
    250 ~"hsl(235, 5%, 36%)",
    300 ~"hsl(233, 4%, 47%)",
    350 ~"hsl(220, 10%, 74%)",
    400 ~"hsl(220, 10%, 74%)",
    500 ~"hsl(220, 10%, 83%)",
    600 ~"hsl(180, 11%, 98%)",
    "" ~"hsl(0, 0%, 100%)"; // white, no stop // TODO check on this value

// Orange
@set-orange:
    100 ~"hsl(23, 85%, 97%)",
    200 ~"hsl(27, 85%, 87%)",
    300 ~"hsl(27, 85%, 72%)",
    400 ~"hsl(27, 90%, 55%)",
    500 ~"hsl(27, 88%, 43%)",
    600 ~"hsl(27, 80%, 29%)";
@set-orange-dark:
    100 ~"hsl(27, 29%, 19%)",
    200 ~"hsl(27, 43%, 31%)",
    300 ~"hsl(27, 43%, 47%)",
    400 ~"hsl(27, 80%, 64%)",
    500 ~"hsl(27, 80%, 78%)",
    600 ~"hsl(27, 80%, 89%)";
@set-orange-hc:
    100 ~"hsl(22, 85%, 97%)",
    200 ~"hsl(22, 85%, 97%)",
    300 ~"hsl(27, 90%, 55%)",
    400 ~"hsl(27, 90%, 55%)",
    500 ~"hsl(27, 80%, 29%)",
    600 ~"hsl(27, 80%, 29%)";
@set-orange-hc-dark:
    100 ~"hsl(27, 29%, 19%)",
    200 ~"hsl(27, 29%, 19%)",
    300 ~"hsl(27, 80%, 64%)",
    400 ~"hsl(27, 80%, 64%)",
    500 ~"hsl(27, 79%, 89%)",
    600 ~"hsl(27, 79%, 89%)";

// Blue
@set-blue:
    100 ~"hsl(210, 80%, 96%)",
    200 ~"hsl(210, 80%, 91%)",
    300 ~"hsl(210, 78%, 76%)",
    400 ~"hsl(210, 70%, 48%)",
    500 ~"hsl(210, 75%, 36%)",
    600 ~"hsl(210, 80%, 23%)";
@set-blue-dark:
    100 ~"hsl(209, 29%, 19%)",
    200 ~"hsl(210, 29%, 35%)",
    300 ~"hsl(210, 29%, 50%)",
    400 ~"hsl(210, 81%, 72%)",
    500 ~"hsl(210, 80%, 82%)",
    600 ~"hsl(210, 80%, 90%)";
@set-blue-hc:
    100 ~"hsl(210, 80%, 96%)",
    200 ~"hsl(210, 80%, 96%)",
    300 ~"hsl(210, 70%, 48%)",
    400 ~"hsl(210, 70%, 48%)",
    500 ~"hsl(210, 80%, 23%)",
    600 ~"hsl(210, 80%, 23%)";
@set-blue-hc-dark:
    100 ~"hsl(209, 29%, 19%)",
    200 ~"hsl(209, 29%, 19%)",
    300 ~"hsl(210, 80%, 72%)",
    400 ~"hsl(210, 80%, 72%)",
    500 ~"hsl(209, 79%, 87%)",
    600 ~"hsl(209, 79%, 87%)";

// Green
@set-green:
    100 ~"hsl(148, 35%, 95%)",
    200 ~"hsl(148, 35%, 88%)",
    300 ~"hsl(148, 35%, 69%)",
    400 ~"hsl(148, 70%, 31%)",
    500 ~"hsl(148, 75%, 22%)",
    600 ~"hsl(148, 75%, 15%)";
@set-green-dark:
    100 ~"hsl(148, 29%, 19%)",
    200 ~"hsl(148, 29%, 27%)",
    300 ~"hsl(148, 25%, 40%)",
    400 ~"hsl(148, 40%, 62%)",
    500 ~"hsl(148, 40%, 75%)",
    600 ~"hsl(148, 40%, 87%)";
@set-green-hc:
    100 ~"hsl(147, 36%, 95%)",
    200 ~"hsl(147, 36%, 95%)",
    300 ~"hsl(148, 70%, 31%)",
    400 ~"hsl(148, 70%, 31%)",
    500 ~"hsl(147, 74%, 15%)",
    600 ~"hsl(147, 74%, 15%)";
@set-green-hc-dark:
    100 ~"hsl(147, 29%, 19%)",
    200 ~"hsl(147, 29%, 19%)",
    300 ~"hsl(148, 40%, 62%)",
    400 ~"hsl(148, 40%, 62%)",
    500 ~"hsl(148, 39%, 87%)",
    600 ~"hsl(148, 39%, 87%)";

// Red
@set-red:
    100 ~"hsl(0, 78%, 96%)",
    200 ~"hsl(0, 70%, 93%)",
    300 ~"hsl(0, 65%, 76%)",
    400 ~"hsl(0, 60%, 49%)",
    500 ~"hsl(0, 65%, 37%)",
    600 ~"hsl(0, 65%, 24%)";
@set-red-dark:
    100 ~"hsl(358, 29%, 19%)",
    200 ~"hsl(0, 29%, 37%)",
    300 ~"hsl(0, 34%, 54%)",
    400 ~"hsl(0, 75%, 77%)",
    500 ~"hsl(0, 69%, 85%)",
    600 ~"hsl(0, 69%, 93%)";
@set-red-hc:
    100 ~"hsl(0, 79%, 96%)",
    200 ~"hsl(0, 79%, 96%)",
    300 ~"hsl(0, 60%, 49%)",
    400 ~"hsl(0, 60%, 49%)",
    500 ~"hsl(0, 66%, 24%)",
    600 ~"hsl(0, 66%, 24%)";
@set-red-hc-dark:
    100 ~"hsl(358, 29%, 19%)",
    200 ~"hsl(358, 29%, 19%)",
    300 ~"hsl(0, 75%, 77%)",
    400 ~"hsl(0, 75%, 77%)",
    500 ~"hsl(0, 70%, 92%)",
    600 ~"hsl(0, 70%, 92%)";

// Yellow
@set-yellow:
    100 ~"hsl(43, 80%, 96%)",
    200 ~"hsl(43, 80%, 88%)",
    300 ~"hsl(43, 85%, 72%)",
    400 ~"hsl(43, 85%, 50%)",
    500 ~"hsl(43, 85%, 33%)",
    600 ~"hsl(43, 84%, 18%)";
@set-yellow-dark:
    100 ~"hsl(43, 29%, 17%)",
    200 ~"hsl(43, 29%, 25%)",
    300 ~"hsl(43, 29%, 40%)",
    400 ~"hsl(43, 59%, 64%)",
    500 ~"hsl(43, 65%, 70%)",
    600 ~"hsl(43, 65%, 85%)";
@set-yellow-hc:
    100 ~"hsl(41, 80%, 96%)",
    200 ~"hsl(41, 80%, 96%)",
    300 ~"hsl(43, 85%, 50%)",
    400 ~"hsl(43, 85%, 50%)",
    500 ~"hsl(48, 85%, 18%)",
    600 ~"hsl(48, 85%, 18%)";
@set-yellow-hc-dark:
    100 ~"hsl(43, 29%, 17%)",
    200 ~"hsl(43, 29%, 17%)",
    300 ~"hsl(43, 59%, 64%)",
    400 ~"hsl(43, 59%, 64%)",
    500 ~"hsl(48, 74%, 91%)",
    600 ~"hsl(48, 74%, 91%)";

// gold
@set-gold:
    100 ~"hsl(46, 100%, 91%)",
    200 ~"hsl(46, 100%, 74%)",
    300 ~"hsl(45, 100%, 42%)",
    400 ~"hsl(46, 92%, 26%)";
@set-gold-dark:
    100 ~"hsl(45, 29%, 24%)",
    200 ~"hsl(45, 47%, 37%)",
    300 ~"hsl(45, 92%, 62%)",
    400 ~"hsl(46, 93%, 78%)";
@set-gold-hc:
    100 ~"hsl(46, 100%, 91%)",
    200 ~"hsl(46, 100%, 91%)",
    300 ~"hsl(45, 100%, 42%)",
    400 ~"hsl(46, 92%, 26%)";
@set-gold-hc-dark:
    100 ~"hsl(45, 22%, 25%)",
    200 ~"hsl(45, 22%, 25%)",
    300 ~"hsl(45, 92%, 62%)",
    400 ~"hsl(46, 93%, 78%)";

// silver
@set-silver:
    100 ~"hsl(0, 0%, 95%)",
    200 ~"hsl(0, 0%, 84%)",
    300 ~"hsl(210, 5%, 68%)",
    400 ~"hsl(210, 2%, 40%)";
@set-silver-dark:
    100 ~"hsl(220, 2%, 26%)",
    200 ~"hsl(220, 1%, 46%)",
    300 ~"hsl(216, 4%, 69%)",
    400 ~"hsl(214, 8%, 83%)";
@set-silver-hc:
    100 ~"hsl(0, 0%, 95%)",
    200 ~"hsl(0, 0%, 84%)",
    300 ~"hsl(210, 5%, 68%)",
    400 ~"hsl(216, 2%, 40%)";
@set-silver-hc-dark:
    100 ~"hsl(220, 2%, 26%)",
    200 ~"hsl(220, 2%, 26%)",
    300 ~"hsl(216, 4%, 69%)",
    400 ~"hsl(214, 8%, 83%)";

// bronze
@set-bronze:
    100 ~"hsl(28, 40%, 92%)",
    200 ~"hsl(30, 47%, 83%)",
    300 ~"hsl(28, 43%, 65%)",
    400 ~"hsl(28, 43%, 39%)";
@set-bronze-dark:
    100 ~"hsl(28, 13%, 27%)",
    200 ~"hsl(28, 27%, 45%)",
    300 ~"hsl(28, 58%, 67%)",
    400 ~"hsl(28, 59%, 83%)";
@set-bronze-hc:
    100 ~"hsl(28, 40%, 92%)",
    200 ~"hsl(28, 40%, 92%)",
    300 ~"hsl(28, 43%, 65%)",
    400 ~"hsl(28, 43%, 39%)";
@set-bronze-hc-dark:
    100 ~"hsl(28, 13%, 27%)",
    200 ~"hsl(28, 13%, 27%)",
    300 ~"hsl(28, 58%, 67%)",
    400 ~"hsl(28, 59%, 83%)";

// TODO consider setting theme variables as fallbacks to orange and blue
// ex: --_theme-primary-400: var(--_custom-theme-primary-400, var(--orange-400));
@sets-light:
    white @set-white,
    black @set-black,
    orange @set-orange,
    blue @set-blue,
    green @set-green,
    red @set-red,
    yellow @set-yellow,
    gold @set-gold,
    silver @set-silver,
    bronze @set-bronze;

@sets-dark:
    white @set-white-dark,
    black @set-black-dark,
    orange @set-orange-dark,
    blue @set-blue-dark,
    green @set-green-dark,
    red @set-red-dark,
    yellow @set-yellow-dark,
    gold @set-gold-dark,
    silver @set-silver-dark,
    bronze @set-bronze-dark;

@sets-hc:
    white @set-white-hc,
    black @set-black-hc,
    orange @set-orange-hc,
    blue @set-blue-hc,
    green @set-green-hc,
    red @set-red-hc,
    yellow @set-yellow-hc,
    gold @set-gold-hc,
    silver @set-silver-hc,
    bronze @set-bronze-hc;

@sets-hc-dark:
    white @set-white-hc-dark,
    black @set-black-hc-dark,
    orange @set-orange-hc-dark,
    blue @set-blue-hc-dark,
    green @set-green-hc-dark,
    red @set-red-hc-dark,
    yellow @set-yellow-hc-dark,
    gold @set-gold-hc-dark,
    silver @set-silver-hc-dark,
    bronze @set-bronze-hc-dark;

// generated atomic color classes
body {
    .create-colors(@sets-light, length(@sets-light), classes);
    .create-theme-classes(primary, orange);
    .create-theme-classes(secondary, blue);
}

// Light mode
body:not(.theme-dark),
body.theme-dark .theme-light__forced,
body.theme-system .theme-light__forced {
    .create-colors(@sets-light, length(@sets-light));
}

// Dark mode
body.theme-dark,
body:not(.theme-dark) .theme-dark__forced {
    .create-colors(@sets-dark, length(@sets-dark));
}

// High contrast mode (Light)
body.theme-highcontrast:not(.theme-dark),
body.theme-dark.theme-highcontrast .theme-light__forced,
body.theme-system.theme-highcontrast .theme-light__forced {
    .create-colors(@sets-hc, length(@sets-hc));
}

// High contrast mode (Dark)
body.theme-dark.theme-highcontrast,
body.theme-highcontrast:not(.theme-dark) .theme-dark__forced {
    .create-colors(@sets-hc-dark, length(@sets-hc-dark));
}
body.theme-system.theme-highcontrast {
    @media (prefers-color-scheme: dark) {
        .create-colors(@sets-hc-dark, length(@sets-hc-dark));
    }
}
